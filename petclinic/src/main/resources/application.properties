management.endpoints.enabled-by-default=false

#configuration properties de prefix "petclinic" girilir ve
#propertyde "-" olan kisimlar camelcase olarak edilerek eslestirilir Kodda displayOwnerwithPets olarak gecmektedir
petclinic.display-owners-with-pets=true

#JSP sayfalarini çözümleyen built-in ViewResolver
#bean'ina prefix ve suffix tanimlari yapilarak kod içerisinde tekrar eden path bilgileri ortadan kaldirilabilir
#src/main altına webapps/WEB-INF klasörleri
#maven clean install ile war alınıp cmd de java -Dspring.profiles.active=dev -jar petclinic-1.0.0.war olarak calıstırılabilir.
spring.mvc.view.prefix=/WEB-INF/jsp/
spring.mvc.view.suffix=.jsp


#4-Request-Response Content Tipinin Belirlenmesi
 
#Bu ayar, gelen isteğin URL'sindeki uzantıya bakarak (örneğin, .json, .xml)
#istemcinin hangi türde veri istediğini anlamaya çalışıp çalışmayacağını belirler.
#Eğer favor-path-extension=true ise:
# Spring, .json uzantısına bakar ve bunun bir JSON isteği olduğunu anlar.
# Yanıtın Content-Type'ını otomatik olarak application/json yapar.
spring.mvc.contentnegotiation.favor-path-extension=true
 
 
#Spring bir isteği eşleştirirken URL'nin sonunda belirli bir dosya uzantısını içeren rotaları da dikkate alır. Örneğin:
#/api/resource ve /api/resource.json aynı endpoint'e yönlendirilir.
#Bu ayar, URL'lerde dosya uzantısı varsa Spring'in bu tür yolları eşleştirme işlemine dahil edip etmeyeceğini belirler.
#Bir endpoint'iniz var: /api/kaynak.
#Eğer use-suffix-pattern=true ise:
#/api/kaynak, /api/kaynak.json, /api/kaynak.xml gibi yollar aynı endpoint ile eşleştirilir. Uzantıya bakmaz ve endpoint'i bulur.
#Eğer use-suffix-pattern=false ise:
#Sadece tam eşleşen URL'ler dikkate alınır. Örneğin:
#/api/kaynak çalışır.
#Ama /api/kaynak.json hata verir (eşleşmez).
spring.mvc.pathmatch.use-suffix-pattern=true

#jpa //üretim hattında none verilmesi gerekli
spring.jpa.hibernate.ddl-auto=none
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true

#spring security password
spring.security.user.name=admin
spring.security.user.password=mahmut123

#sonradan eklenenler
management.endpoints.web.exposure.include=*

#shemanın h2 ye bakmasi saglandi.
spring.datasource.platform=h2

#fake mail property parametreleri
spring.mail.host=localhost

#gmail icin deneme
#spring.mail.host=mail.example.com
#spring.mail.username=mahmut.duman@example.com
#spring.mail.host=smtp.gmail.com
#spring.mail.port=587
#spring.mail.username=dmn.mhmt@gmail.com
#spring.mail.password=pwd
#spring.mail.protocol=smtp
#spring.mail.smtp.auth=true
#spring.mail.smtp.starttls.enable=true  // STARTTLS'i etkinleştiriyoruz
#spring.mail.smtp.ssl.enable=false  // SSL'yi devre dışı bırakıyoruz
#spring.mail.default-encoding=UTF-8
 
 
 
 
 
 
 
 
#İstekler
#http://localhost:8080/rest/owner/1
#http://localhost:8080/rest/owner/1.xml
 
#<owner>
#    <firstName>Mahmut</firstName>
#    <id>1</id>
#    <lastName>Duman</lastName>
#</owner>
 
#http://localhost:8080/rest/owner/1.json
#{
#    "id": 1,
#    "firstName": "Mahmut",
#    "lastName": "Duman"
#}
#Datasource ayarları buradan verilir.
#spring.datasource.url=jdbc:h2:tcp://localhost/~/test
#spring.datasource.username=sa
#spring.datasource.password=


